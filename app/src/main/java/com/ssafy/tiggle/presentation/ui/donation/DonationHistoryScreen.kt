package com.ssafy.tiggle.presentation.ui.donation

import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.ssafy.tiggle.R
import com.ssafy.tiggle.core.utils.Formatter
import com.ssafy.tiggle.domain.entity.donation.DonationCategory
import com.ssafy.tiggle.domain.entity.donation.DonationHistory
import com.ssafy.tiggle.presentation.ui.components.TiggleScreenLayout
import com.ssafy.tiggle.presentation.ui.theme.AppTypography
import com.ssafy.tiggle.presentation.ui.theme.TiggleBlue
import com.ssafy.tiggle.presentation.ui.theme.TiggleGrayLight
import com.ssafy.tiggle.presentation.ui.theme.TiggleGrayText
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

@Composable
fun DonationHistoryScreen(
    onBackClick: () -> Unit = {},
    viewModel: DonationHistoryViewModel = hiltViewModel()
) {
    val uiState by viewModel.uiState.collectAsState()

    LaunchedEffect(Unit) {
        viewModel.loadDonationHistory()
    }

    TiggleScreenLayout(
        title = "ÎÇòÏùò Í∏∞Î∂Ä Í∏∞Î°ù",
        showBackButton = true,
        onBackClick = onBackClick,
        enableScroll = false
    ) {
        when {
            uiState.isLoading -> {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator(color = TiggleBlue)
                }
            }

            !uiState.errorMessage.isNullOrEmpty() -> {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = uiState.errorMessage ?: "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
                        color = Color.Red,
                        textAlign = TextAlign.Center
                    )
                }
            }

            else -> {
                DonationHistoryContent(
                    donationHistoryList = uiState.donationHistoryList
                )
            }
        }
    }
}

@Composable
private fun DonationHistoryContent(
    donationHistoryList: List<DonationHistory>
) {
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        if (donationHistoryList.isEmpty()) {
            // Í∏∞Î∂Ä Í∏∞Î°ùÏù¥ ÏóÜÏùÑ Îïå
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f),
                contentAlignment = Alignment.Center
            ) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "ÏïÑÏßÅ Í∏∞Î∂Ä Í∏∞Î°ùÏù¥ ÏóÜÏñ¥Ïöî",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Medium,
                        color = TiggleGrayText,
                        style = AppTypography.bodyLarge
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Ï≤´ Î≤àÏß∏ Í∏∞Î∂ÄÎ•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!",
                        fontSize = 14.sp,
                        color = TiggleGrayText,
                        style = AppTypography.bodyMedium
                    )
                }
            }
        } else {
            // Í∏∞Î∂Ä Í∏∞Î°ùÏù¥ ÏûàÏùÑ Îïå
            LazyColumn(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                items(donationHistoryList) { donation ->
                    DonationHistoryItem(donation = donation)
                }
            }
        }
        
        // Footer Ïπ¥ÎìúÎäî Ìï≠ÏÉÅ Îß® ÏïÑÎûòÏóê ÌëúÏãú
        DonationFooterCard()
    }
}

@Composable
private fun DonationHistoryItem(
    donation: DonationHistory
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 12.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏïÑÏù¥ÏΩò
        Box(
            modifier = Modifier
                .size(48.dp)
                .clip(CircleShape)
                .background(TiggleGrayLight),
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = getCategoryIconRes(donation.category)),
                contentDescription = donation.category.value,
                modifier = Modifier.size(32.dp)
            )
        }

        Spacer(modifier = Modifier.width(16.dp))

        // Í∏∞Î∂Ä Ï†ïÎ≥¥
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = donation.title,
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium,
                color = Color.Black,
                style = AppTypography.bodyLarge
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = formatDonationDate(donation.donatedAt),
                fontSize = 12.sp,
                color = TiggleGrayText,
                style = AppTypography.bodySmall
            )
        }

        // Í∏∞Î∂Ä Í∏àÏï°
        Text(
            text = "${Formatter.formatCurrency(donation.amount.toLong())}",
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = Color.Black,
            style = AppTypography.bodyLarge
        )
    }
}

@Composable
private fun DonationFooterCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(2.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Start
            ) {
                Text(
                    text = "üí° ",
                    fontSize = 20.sp
                )

                Text(
                    text = "Í∏∞Î∂Ä Î∞©Ïãù",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = TiggleBlue
                )
            }
            
            Spacer(modifier = Modifier.height(8.dp))

            Text(
                text = "Ìã∞ÎÅåÏùÄ Î™®Îì† Í≥ºÏ†ïÏóêÏÑú Ìà¨Î™ÖÏÑ±Í≥º Ïã†Î¢∞Î•º " +
                        "ÏµúÏö∞ÏÑ† Í∞ÄÏπòÎ°ú ÏÇºÏäµÎãàÎã§.\n" +
                        "Í∏∞Î∂ÄÍ∏àÏùò ÏÇ¨Ïö©ÏùÑ Ìà¨Î™ÖÌïòÍ≤å Í≥µÍ∞úÌïòÍ≥† Ï†ïÌï¥ÏßÑ Ï†àÏ∞®Ïóê Îî∞Îùº ÏßëÌñâÌïòÏó¨, " +
                        "ÎàÑÍµ¨ÎÇò ÏïàÏã¨ÌïòÍ≥† Ï∞∏Ïó¨Ìï† Ïàò ÏûàÎäî Ï±ÖÏûÑ ÏûàÎäî " +
                        "Í∏∞Î∂Ä ÏãúÏä§ÌÖúÏùÑ Ïö¥ÏòÅÌï©ÎãàÎã§.",
                fontSize = 12.sp,
                color = TiggleGrayText,
                lineHeight = 16.sp
            )
        }
    }
}

private fun getCategoryIconRes(category: DonationCategory): Int {
    return when (category) {
        DonationCategory.PLANET -> R.drawable.planet
        DonationCategory.PEOPLE -> R.drawable.people
        DonationCategory.PROSPERITY -> R.drawable.prosperity
    }
}

@RequiresApi(Build.VERSION_CODES.O)
private fun formatDonationDate(dateTimeString: String): String {
    return try {
        val dateTime = LocalDateTime.parse(dateTimeString, DateTimeFormatter.ISO_LOCAL_DATE_TIME)
        val formatter = DateTimeFormatter.ofPattern("MÏõî dÏùº")
        dateTime.format(formatter)
    } catch (e: Exception) {
        dateTimeString
    }
}

@Preview(showBackground = true)
@Composable
private fun DonationHistoryScreenPreview() {
    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    val sampleHistoryList = listOf(
        DonationHistory(
            category = DonationCategory.PLANET,
            donatedAt = "2024-08-18T19:38:00",
            amount = 3450,
            title = "Planet"
        ),
        DonationHistory(
            category = DonationCategory.PEOPLE,
            donatedAt = "2024-07-18T14:20:00",
            amount = 780,
            title = "People"
        ),
        DonationHistory(
            category = DonationCategory.PEOPLE,
            donatedAt = "2024-07-18T11:15:00",
            amount = 780,
            title = "People"
        ),
        DonationHistory(
            category = DonationCategory.PLANET,
            donatedAt = "2024-07-18T09:30:00",
            amount = 780,
            title = "Planet"
        )
    )

    DonationHistoryContent(donationHistoryList = sampleHistoryList)
}

@Preview(showBackground = true)
@Composable
private fun DonationHistoryEmptyPreview() {
    // Îπà Î¶¨Ïä§Ìä∏Î°ú ÎØ∏Î¶¨Î≥¥Í∏∞
    DonationHistoryContent(donationHistoryList = emptyList())
}
